-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS test_events.event_codes
(
    code "char" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT event_codes_pkey PRIMARY KEY (code),
    CONSTRAINT event_codes_unique UNIQUE (description)
);

CREATE TABLE IF NOT EXISTS test_events.events
(
    assembly_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    serial_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    event_code "char" NOT NULL,
    host_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    "time" time without time zone NOT NULL,
    id integer NOT NULL DEFAULT nextval('test_events.test_events_id_seq'::regclass),
    CONSTRAINT events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS test_events.exceptions
(
    date date NOT NULL,
    "time" time without time zone NOT NULL,
    host_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    exception character varying(5120) COLLATE pg_catalog."default" NOT NULL,
    user_dir character varying(255) COLLATE pg_catalog."default" NOT NULL,
    id integer NOT NULL DEFAULT nextval('test_events.exceptions_id_seq'::regclass),
    CONSTRAINT exceptions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS test_events.psuedo_assemblies
(
    pseudo_assembly character varying(255) COLLATE pg_catalog."default" NOT NULL,
    customer character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT assemblies_pkey PRIMARY KEY (pseudo_assembly)
);

CREATE TABLE IF NOT EXISTS tests.customers
(
    customer character varying(255) COLLATE pg_catalog."default" NOT NULL,
    legal_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    city character varying(255) COLLATE pg_catalog."default" NOT NULL,
    state_province character varying(255) COLLATE pg_catalog."default",
    country character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT customers_pkey PRIMARY KEY (customer)
);

CREATE TABLE IF NOT EXISTS tests.edocs
(
    edoc_path character varying(255) COLLATE pg_catalog."default" NOT NULL,
    part_number character varying(255) COLLATE pg_catalog."default",
    part_revision character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT edocs_pkey PRIMARY KEY (edoc_path)
);

CREATE TABLE IF NOT EXISTS tests.engineers
(
    engineer character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT engineer_pkey PRIMARY KEY (engineer)
);

CREATE TABLE IF NOT EXISTS tests.facilities
(
    facility character varying(255) COLLATE pg_catalog."default" NOT NULL,
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    city character varying(255) COLLATE pg_catalog."default" NOT NULL,
    state_province character varying(255) COLLATE pg_catalog."default" NOT NULL,
    country character varying(255) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT facility PRIMARY KEY (facility)
);

CREATE TABLE IF NOT EXISTS tests.part_number_categories
(
    category character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT part_number_categories_pkey PRIMARY KEY (category)
);

CREATE TABLE IF NOT EXISTS tests.part_numbers
(
    part_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    category character varying(255) COLLATE pg_catalog."default" NOT NULL,
    customer character varying(255) COLLATE pg_catalog."default" NOT NULL,
    facility character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT part_number_pkey PRIMARY KEY (part_number)
);

CREATE TABLE IF NOT EXISTS tests.system_types
(
    system_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    system_category character varying(255) COLLATE pg_catalog."default" NOT NULL,
    system_category_initialization character varying(255) COLLATE pg_catalog."default" NOT NULL,
    manufacturer character varying(255) COLLATE pg_catalog."default" NOT NULL,
    model character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT system_types_pkey PRIMARY KEY (system_type)
);

CREATE TABLE IF NOT EXISTS tests.systems
(
    host_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    system_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    active boolean NOT NULL DEFAULT false,
    operating_system character varying(255) COLLATE pg_catalog."default" NOT NULL,
    system_software character varying(255) COLLATE pg_catalog."default" NOT NULL,
    abt_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    serial_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT systems_pkey PRIMARY KEY (host_name)
);

CREATE TABLE IF NOT EXISTS tests.technicians
(
    technician character varying(255) COLLATE pg_catalog."default" NOT NULL,
    employee_number smallint NOT NULL,
    stamp_number character varying(4) COLLATE pg_catalog."default",
    CONSTRAINT technicians_pkey PRIMARY KEY (technician)
);

CREATE TABLE IF NOT EXISTS tests.test_groups
(
    group_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    group_description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT test_groups_pkey PRIMARY KEY (group_name)
);

CREATE TABLE IF NOT EXISTS tests.tests
(
    part_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    system_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    group_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    engineer character varying COLLATE pg_catalog."default" DEFAULT 'Unassigned'::character varying,
    CONSTRAINT test_pkey PRIMARY KEY (part_number, system_type, group_name),
    CONSTRAINT part_number_system_ukey UNIQUE (part_number, system_type)
);

CREATE TABLE IF NOT EXISTS tests.troubleshooting_notes
(
    group_name character varying(255) COLLATE pg_catalog."default",
    problem text COLLATE pg_catalog."default" NOT NULL,
    resolution text COLLATE pg_catalog."default",
    resolver character varying(255) COLLATE pg_catalog."default",
    hyperlink character varying(255) COLLATE pg_catalog."default",
    date_entered date NOT NULL DEFAULT ('now'::text)::date,
    pkey integer NOT NULL DEFAULT nextval('tests.troubleshooting_notes_pkey_seq'::regclass),
    CONSTRAINT troubleshooting_notes_pkey PRIMARY KEY (pkey)
);

ALTER TABLE IF EXISTS test_events.events
    ADD CONSTRAINT event_codes_fkey FOREIGN KEY (event_code)
    REFERENCES test_events.event_codes (code) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_event_code_fkey
    ON test_events.events(event_code);


ALTER TABLE IF EXISTS tests.part_numbers
    ADD CONSTRAINT category_fkey FOREIGN KEY (category)
    REFERENCES tests.part_number_categories (category) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.part_numbers
    ADD CONSTRAINT customer_fkey FOREIGN KEY (customer)
    REFERENCES tests.customers (customer) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.part_numbers
    ADD CONSTRAINT facility_fkey FOREIGN KEY (facility)
    REFERENCES tests.facilities (facility) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.systems
    ADD CONSTRAINT system_type_fkey FOREIGN KEY (system_type)
    REFERENCES tests.system_types (system_type) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.tests
    ADD CONSTRAINT engineer_fkey FOREIGN KEY (engineer)
    REFERENCES tests.engineers (engineer) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET DEFAULT;
CREATE INDEX IF NOT EXISTS fki_engineer_fkey
    ON tests.tests(engineer);


ALTER TABLE IF EXISTS tests.tests
    ADD CONSTRAINT part_number_fkey FOREIGN KEY (part_number)
    REFERENCES tests.part_numbers (part_number) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.tests
    ADD CONSTRAINT system_type_fkey FOREIGN KEY (system_type)
    REFERENCES tests.system_types (system_type) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.tests
    ADD CONSTRAINT test_group_fkey FOREIGN KEY (group_name)
    REFERENCES tests.test_groups (group_name) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS tests.troubleshooting_notes
    ADD CONSTRAINT group_name_fkey FOREIGN KEY (group_name)
    REFERENCES tests.test_groups (group_name) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_group_name_fkey
    ON tests.troubleshooting_notes(group_name);


ALTER TABLE IF EXISTS tests.troubleshooting_notes
    ADD CONSTRAINT technician_fkey FOREIGN KEY (resolver)
    REFERENCES tests.technicians (technician) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;

END;